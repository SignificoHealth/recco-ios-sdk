# This workflow will build a Swift project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-swift

name: Run tests

on:
  pull_request:
    branches: [ "main", "develop" ]
  issue_comment:
    types: [opened, synchronize, reopened]
  workflow_dispatch:

env:
  TEST_SCHEME: ReccoUITests
  DEVICE_NAME: iPhone 14
  DEVICE_OS: 16.4
  IS_CI: true

jobs:
  test:
    name: Run tests
    runs-on: macos-13
    # If its triggered on main or if a comment's body in a pull request equal to "/test'"
    if: ${{ github.base_ref == 'main' || (github.event.issue.pull_request && contains(github.event.comment.body, '/test')) }}
    steps:
      - name: Add workflow started comment to PR
        uses: actions/github-script@v6
        with:
          script: |
            const name = '${{ github.workflow }}';
            const url = '${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}';
            const body = `[${name}](${url}) started ⏳`;
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            })
      - uses: actions/checkout@v3
      - name: Select Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '14.3.1'
      - name: Install SwiftLint
        run: brew update; brew outdated swiftlint || brew upgrade swiftlint
      - name: Run SwiftLint
        run: swiftlint
      - name: Run tests
        run: xcodebuild test -scheme $TEST_SCHEME -testPlan $TEST_SCHEME -destination "platform=iOS Simulator,OS=$DEVICE_OS,name=$DEVICE_NAME" | xcpretty && exit ${PIPESTATUS[0]}
      - name: Add workflow finished comment to PR
        uses: actions/github-script@v6
        with:
          script: |
            const name = '${{ github.workflow }}';
            const url = '${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}';
            const success = '${{ job.status }}' === 'success';
            const body = `[${name}](${url}) ${success ? 'succeeded ✅' : 'failed ❌'}`;

            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            })
      - name: Publish finish status
        uses: actions/github-script@v6
        with:
          script: |
            const response = await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.sha,
              context: '${{ github.workflow }}',
              state: success ? 'success' : 'failure'
            });
            console.log("Status update response:", response);