//
// RecommendationAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

internal class RecommendationAPI {

    /**
     A list of content filtered by topic.

     - parameter topic: (path)
     - parameter contentTypes: (query)  (optional)
     - returns: [AppUserRecommendationDTO]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    internal class func exploreContentByTopic(topic: TopicDTO, contentTypes: [ContentTypeDTO]? = nil) async throws -> [AppUserRecommendationDTO] {
        return try await exploreContentByTopicWithRequestBuilder(topic: topic, contentTypes: contentTypes).execute().body
    }

    /**
     A list of content filtered by topic.
     - GET /api/v1/me/recommendations/explore/topics/{topic}
     - Bearer Token:
     - type: http
     - name: bearerAuth
     - parameter topic: (path)
     - parameter contentTypes: (query)  (optional)
     - returns: RequestBuilder<[AppUserRecommendationDTO]>
     */
    internal class func exploreContentByTopicWithRequestBuilder(topic: TopicDTO, contentTypes: [ContentTypeDTO]? = nil) -> RequestBuilder<[AppUserRecommendationDTO]> {
        var localVariablePath = "/api/v1/me/recommendations/explore/topics/{topic}"
        let topicPreEscape = "\(APIHelper.mapValueToPathItem(topic))"
        let topicPostEscape = topicPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{topic}", with: topicPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "contentTypes": (wrappedValue: contentTypes?.encodeToJSON(), isExplode: true)
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[AppUserRecommendationDTO]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get an article.

     - parameter catalogId: (query)
     - returns: AppUserArticleDTO
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    internal class func getArticle(catalogId: String) async throws -> AppUserArticleDTO {
        return try await getArticleWithRequestBuilder(catalogId: catalogId).execute().body
    }

    /**
     Get an article.
     - GET /api/v1/me/recommendations/articles
     - Bearer Token:
     - type: http
     - name: bearerAuth
     - parameter catalogId: (query)
     - returns: RequestBuilder<AppUserArticleDTO>
     */
    internal class func getArticleWithRequestBuilder(catalogId: String) -> RequestBuilder<AppUserArticleDTO> {
        let localVariablePath = "/api/v1/me/recommendations/articles"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "catalogId": (wrappedValue: catalogId.encodeToJSON(), isExplode: true)
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AppUserArticleDTO>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get an audio.

     - parameter catalogId: (query)
     - returns: AppUserAudioDTO
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    internal class func getAudio(catalogId: String) async throws -> AppUserAudioDTO {
        return try await getAudioWithRequestBuilder(catalogId: catalogId).execute().body
    }

    /**
     Get an audio.
     - GET /api/v1/me/recommendations/audios
     - BASIC:
     - type: http
     - name: bearerAuth
     - parameter catalogId: (query)
     - returns: RequestBuilder<AppUserAudioDTO>
     */
    internal class func getAudioWithRequestBuilder(catalogId: String) -> RequestBuilder<AppUserAudioDTO> {
        let localVariablePath = "/api/v1/me/recommendations/audios"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "catalogId": (wrappedValue: catalogId.encodeToJSON(), isExplode: true)
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AppUserAudioDTO>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     A list of bookmarked recommendations.

     - returns: [AppUserRecommendationDTO]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    internal class func getBookmarkedRecommendations() async throws -> [AppUserRecommendationDTO] {
        return try await getBookmarkedRecommendationsWithRequestBuilder().execute().body
    }

    /**
     A list of bookmarked recommendations.
     - GET /api/v1/me/recommendations/bookmarked
     - Bearer Token:
     - type: http
     - name: bearerAuth
     - returns: RequestBuilder<[AppUserRecommendationDTO]>
     */
    internal class func getBookmarkedRecommendationsWithRequestBuilder() -> RequestBuilder<[AppUserRecommendationDTO]> {
        let localVariablePath = "/api/v1/me/recommendations/bookmarked"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[AppUserRecommendationDTO]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     A list of most popular content.

     - parameter contentTypes: (query)  (optional)
     - returns: [AppUserRecommendationDTO]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    internal class func getMostPopularContent(contentTypes: [ContentTypeDTO]? = nil) async throws -> [AppUserRecommendationDTO] {
        return try await getMostPopularContentWithRequestBuilder(contentTypes: contentTypes).execute().body
    }

    /**
     A list of most popular content.
     - GET /api/v1/me/recommendations/most_popular
     - Bearer Token:
     - type: http
     - name: bearerAuth
     - parameter contentTypes: (query)  (optional)
     - returns: RequestBuilder<[AppUserRecommendationDTO]>
     */
    internal class func getMostPopularContentWithRequestBuilder(contentTypes: [ContentTypeDTO]? = nil) -> RequestBuilder<[AppUserRecommendationDTO]> {
        let localVariablePath = "/api/v1/me/recommendations/most_popular"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "contentTypes": (wrappedValue: contentTypes?.encodeToJSON(), isExplode: true)
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[AppUserRecommendationDTO]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     A list of newest content.

     - parameter contentTypes: (query)  (optional)
     - returns: [AppUserRecommendationDTO]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    internal class func getNewestContent(contentTypes: [ContentTypeDTO]? = nil) async throws -> [AppUserRecommendationDTO] {
        return try await getNewestContentWithRequestBuilder(contentTypes: contentTypes).execute().body
    }

    /**
     A list of newest content.
     - GET /api/v1/me/recommendations/newest
     - Bearer Token:
     - type: http
     - name: bearerAuth
     - parameter contentTypes: (query)  (optional)
     - returns: RequestBuilder<[AppUserRecommendationDTO]>
     */
    internal class func getNewestContentWithRequestBuilder(contentTypes: [ContentTypeDTO]? = nil) -> RequestBuilder<[AppUserRecommendationDTO]> {
        let localVariablePath = "/api/v1/me/recommendations/newest"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "contentTypes": (wrappedValue: contentTypes?.encodeToJSON(), isExplode: true)
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[AppUserRecommendationDTO]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     A list of starting recommendations.

     - parameter contentTypes: (query)  (optional)
     - returns: [AppUserRecommendationDTO]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    internal class func getStartingRecommendations(contentTypes: [ContentTypeDTO]? = nil) async throws -> [AppUserRecommendationDTO] {
        return try await getStartingRecommendationsWithRequestBuilder(contentTypes: contentTypes).execute().body
    }

    /**
     A list of starting recommendations.
     - GET /api/v1/me/recommendations/starting
     - Bearer Token:
     - type: http
     - name: bearerAuth
     - parameter contentTypes: (query)  (optional)
     - returns: RequestBuilder<[AppUserRecommendationDTO]>
     */
    internal class func getStartingRecommendationsWithRequestBuilder(contentTypes: [ContentTypeDTO]? = nil) -> RequestBuilder<[AppUserRecommendationDTO]> {
        let localVariablePath = "/api/v1/me/recommendations/starting"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "contentTypes": (wrappedValue: contentTypes?.encodeToJSON(), isExplode: true)
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[AppUserRecommendationDTO]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     A list of tailored recommendations filtered by topic.

     - parameter topic: (path)
     - parameter contentTypes: (query)  (optional)
     - returns: [AppUserRecommendationDTO]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    internal class func getTailoredRecommendationsByTopic(topic: TopicDTO, contentTypes: [ContentTypeDTO]? = nil) async throws -> [AppUserRecommendationDTO] {
        return try await getTailoredRecommendationsByTopicWithRequestBuilder(topic: topic, contentTypes: contentTypes).execute().body
    }

    /**
     A list of tailored recommendations filtered by topic.
     - GET /api/v1/me/recommendations/tailored/topics/{topic}
     - Bearer Token:
     - type: http
     - name: bearerAuth
     - parameter topic: (path)
     - parameter contentTypes: (query)  (optional)
     - returns: RequestBuilder<[AppUserRecommendationDTO]>
     */
    internal class func getTailoredRecommendationsByTopicWithRequestBuilder(topic: TopicDTO, contentTypes: [ContentTypeDTO]? = nil) -> RequestBuilder<[AppUserRecommendationDTO]> {
        var localVariablePath = "/api/v1/me/recommendations/tailored/topics/{topic}"
        let topicPreEscape = "\(APIHelper.mapValueToPathItem(topic))"
        let topicPostEscape = topicPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{topic}", with: topicPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "contentTypes": (wrappedValue: contentTypes?.encodeToJSON(), isExplode: true)
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[AppUserRecommendationDTO]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     A list of recommendations which are improved by the preferences.

     - parameter contentTypes: (query)  (optional)
     - returns: [AppUserRecommendationDTO]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    internal class func getUserPreferredRecommendations(contentTypes: [ContentTypeDTO]? = nil) async throws -> [AppUserRecommendationDTO] {
        return try await getUserPreferredRecommendationsWithRequestBuilder(contentTypes: contentTypes).execute().body
    }

    /**
     A list of recommendations which are improved by the preferences.
     - GET /api/v1/me/recommendations/preferred
     - Bearer Token:
     - type: http
     - name: bearerAuth
     - parameter contentTypes: (query)  (optional)
     - returns: RequestBuilder<[AppUserRecommendationDTO]>
     */
    internal class func getUserPreferredRecommendationsWithRequestBuilder(contentTypes: [ContentTypeDTO]? = nil) -> RequestBuilder<[AppUserRecommendationDTO]> {
        let localVariablePath = "/api/v1/me/recommendations/preferred"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "contentTypes": (wrappedValue: contentTypes?.encodeToJSON(), isExplode: true)
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[AppUserRecommendationDTO]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get a video.

     - parameter catalogId: (query)
     - returns: AppUserVideoDTO
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    internal class func getVideo(catalogId: String) async throws -> AppUserVideoDTO {
        return try await getVideoWithRequestBuilder(catalogId: catalogId).execute().body
    }

    /**
     Get a video.
     - GET /api/v1/me/recommendations/videos
     - BASIC:
     - type: http
     - name: bearerAuth
     - parameter catalogId: (query)
     - returns: RequestBuilder<AppUserVideoDTO>
     */
    internal class func getVideoWithRequestBuilder(catalogId: String) -> RequestBuilder<AppUserVideoDTO> {
        let localVariablePath = "/api/v1/me/recommendations/videos"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "catalogId": (wrappedValue: catalogId.encodeToJSON(), isExplode: true)
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AppUserVideoDTO>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Set recommendation bookmark state.

     - parameter updateBookmarkDTO: (body)
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    internal class func setBookmark(updateBookmarkDTO: UpdateBookmarkDTO) async throws {
        return try await setBookmarkWithRequestBuilder(updateBookmarkDTO: updateBookmarkDTO).execute().body
    }

    /**
     Set recommendation bookmark state.
     - PUT /api/v1/me/recommendations/bookmark
     - Bearer Token:
     - type: http
     - name: bearerAuth
     - parameter updateBookmarkDTO: (body)
     - returns: RequestBuilder<Void>
     */
    internal class func setBookmarkWithRequestBuilder(updateBookmarkDTO: UpdateBookmarkDTO) -> RequestBuilder<Void> {
        let localVariablePath = "/api/v1/me/recommendations/bookmark"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: updateBookmarkDTO)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Set recommendation rating.

     - parameter updateRatingDTO: (body)
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    internal class func setRating(updateRatingDTO: UpdateRatingDTO) async throws {
        return try await setRatingWithRequestBuilder(updateRatingDTO: updateRatingDTO).execute().body
    }

    /**
     Set recommendation rating.
     - PUT /api/v1/me/recommendations/rating
     - Bearer Token:
     - type: http
     - name: bearerAuth
     - parameter updateRatingDTO: (body)
     - returns: RequestBuilder<Void>
     */
    internal class func setRatingWithRequestBuilder(updateRatingDTO: UpdateRatingDTO) -> RequestBuilder<Void> {
        let localVariablePath = "/api/v1/me/recommendations/rating"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: updateRatingDTO)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
