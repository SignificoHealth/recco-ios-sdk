//
// AppUserArticleDTO.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct AppUserArticleDTO: Codable, JSONEncodable, Hashable {

    public enum RatingDTO: String, Codable, CaseIterable {
        case like = "like"
        case dislike = "dislike"
        case notRated = "not_rated"
    }
    public enum StatusDTO: String, Codable, CaseIterable {
        case noInteraction = "no_interaction"
        case viewed = "viewed"
    }
    public var id: String
    public var rating: RatingDTO
    public var status: StatusDTO
    public var headline: String
    public var lead: String?
    public var imageUrl: String?
    public var articleBodyHtml: String?

    public init(id: String, rating: RatingDTO, status: StatusDTO, headline: String, lead: String? = nil, imageUrl: String? = nil, articleBodyHtml: String? = nil) {
        self.id = id
        self.rating = rating
        self.status = status
        self.headline = headline
        self.lead = lead
        self.imageUrl = imageUrl
        self.articleBodyHtml = articleBodyHtml
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case rating
        case status
        case headline
        case lead
        case imageUrl
        case articleBodyHtml
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encode(rating, forKey: .rating)
        try container.encode(status, forKey: .status)
        try container.encode(headline, forKey: .headline)
        try container.encodeIfPresent(lead, forKey: .lead)
        try container.encodeIfPresent(imageUrl, forKey: .imageUrl)
        try container.encodeIfPresent(articleBodyHtml, forKey: .articleBodyHtml)
    }
}

